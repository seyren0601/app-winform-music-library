<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        3NDRhhhn4S/4cMMM6v/Z
</value>
  </data>
</root>